-- CRIAR A BASE DE DADOS _ABD_03361_A_NOME_BIBLIOTECA`

CREATE DATABASE _ABD_03361_A_SARAHNARAYAMY_BIBLIOTECA;
USE _ABD_03361_A_SARAHNARAYAMY_BIBLIOTECA;
 
-- CRIAR UM CONTROLE DE BIBLIOTECA
-- TEREMOS OS DADOS DOS ALUNOS, SÉRIES DOS ALUNOS E DOS LIVROS, GENEROS E EMPRESTIMOS
 
-- 1 A TABELA GENEROS TEM OS CAMPOS ID E NOME_GENERO, POPULE EM SEGUIDA COM 5 GENEROS

CREATE TABLE GENRE ( 
	ID INT AUTO_INCREMENT PRIMARY KEY,  
	GENRE_NAME VARCHAR(50) NOT NULL
);

INSERT INTO GENRE (GENRE_NAME) VALUES
('Fiction'),
('Science'),
('Philosophy'),
('History'),
('Technology');

-- 2 A TABELA LIVROS TEM OS CAMPOS ID, NOME_LIVRO, AUTOR, ID_GENERO, QTD_DISPONIVEL, PRECO, DATA_INSERCAO,
-- POPULE EM SEGUIDA EM COM 5 LIVROS QUE VOCÊ RECOMENDA SENDO ESSENCIAIS PARA QUALQUER UM
-- DICA: PARA DATA_INSERCAO USE O TIPO TIMESTAMP DEFAULT CURRENT_TIMESTAMP

CREATE TABLE BOOKS ( 
	ID INT AUTO_INCREMENT PRIMARY KEY,  
	BOOK_NAME VARCHAR(100) NOT NULL,
    AUTHOR VARCHAR(100) NOT NULL,
    GENRE_ID INT,
    FOREIGN KEY (GENRE_ID) REFERENCES BOOKS(ID),
    QTY_AVAILABLE INT,
    PRICE DECIMAL(10, 2),
    DATE_CREATED DATE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

SELECT B.BOOK_NAME, B.GENRE_ID, B.PRICE
FROM AVAILABLE_BOOKS B
JOIN GENRE G ON B.GENRE_ID = G.ID;

-- 										CORRIGINDO MEU ERRO AO APLICAR A FOREIGN KEY EM BOOKS

-- 										O CORRETO DEVERIA SER FOREIGN KEY (GENRE_ID) REFERENCES GENRE(ID),

-- SHOW CREATE TABLE AVAILABLE_BOOKS;
-- FIND CONSTRAINT 'AVAILABLE_BOOKS_ibfk_1' FOREIGN KEY ('GENRE_ID') REFERENCES 'AVAILABLE_BOOKS' ('ID');
-- ALTER TABLE AVAILABLE_BOOKS DROP FOREIGN KEY AVAILABLE_BOOKS_ibfk_1;
-- ALTER TABLE AVAILABLE_BOOKS MODIFY GENRE_ID BIGINT;
-- ALTER TABLE AVAILABLE_BOOKS CHANGE GENRE_ID CATEGORY_ID INT;
-- ALTER TABLE AVAILABLE_BOOKS
-- ADD CONSTRAINT fk_livros_genero
-- FOREIGN KEY (CATEGORY_ID) REFERENCES GENRE(ID);
-- ALTER TABLE AVAILABLE_BOOKS 
-- RENAME COLUMN CATEGORY_ID TO GENRE_ID;
-- SELECT * FROM AVAILABLE_BOOKS;
-- SELECT CONSTRAINT_NAME, TABLE_NAME
-- FROM information_schema.KEY_COLUMN_USAGE
-- WHERE TABLE_SCHEMA = DATABASE();

INSERT INTO BOOKS (BOOK_NAME, AUTHOR, GENRE_ID, QTY_AVAILABLE, PRICE)
VALUES
('1984', 'George Orwell', 1, 4, 59.90),
('A Brief History of Time', 'Stephen Hawking', 2, 3, 74.50),
('Meditations', 'Marcus Aurelius', 3, 5, 42.00),
('Sapiens: A Brief History of Humankind', 'Yuval Noah Harari', 4, 2, 89.90),
('Clean Code', 'Robert C. Martin', 5, 6, 120.00);
 
-- 3 CRIAR UMA TABELA DAS SÉRIES DOS ALUNOS COM O NOME DE SERIES COM OS CAMPOS ID, NOME_SERIE
-- POPULE EM SEGUIDA EXEMPLO: ('6º'), ('7º')

CREATE TABLE GRADES ( 
	ID INT AUTO_INCREMENT PRIMARY KEY,  
	GRADE_NAME VARCHAR(50) NOT NULL
);

INSERT INTO GRADES (GRADE_NAME) VALUES
('6th Grade'),
('7th Grade');
 
-- 4 CRIAR A TABELA DE ALUNOS COM OS CAMPOS ID, NOME, ID_SERIE, NASCIMENTO
-- POPULE COM 10 ALUNOS

CREATE TABLE STUDENTS ( 
	ID INT AUTO_INCREMENT PRIMARY KEY,  
	STUDENT_NAME VARCHAR(100) NOT NULL,
    GRADE_ID INT,
    FOREIGN KEY (GRADE_ID) REFERENCES GRADES(ID),
    BIRTH_DATE DATE
);

INSERT INTO STUDENTS (STUDENT_NAME, GRADE_ID, BIRTH_DATE)
VALUES
('Alice Johnson', 1, '2012-05-14'),
('Bruno Silva', 1, '2012-08-22'),
('Carla Mendes', 2, '2011-03-10'),
('Daniel Rocha', 2, '2011-07-02'),
('Emily Carter', 1, '2012-11-29'),
('Felipe Santos', 2, '2011-12-19'),
('Giovanna Costa', 1, '2012-01-23'),
('Henry Oliveira', 1, '2012-09-30'),
('Isabella Torres', 2, '2011-02-17'),
('João Pereira', 2, '2011-10-06');
 
-- 5 TABELA EMPRESTIMOS 
-- ID, ID_ALUNO, ID_LIVRO, DATA_EMPRESTO TIMESTAMP DEFAULT CURRENT_TIMESTAMP, DEVOLVIDO BOOLEAN DEFAULT FALSE

CREATE TABLE BOOK_LOANS ( 
	ID INT AUTO_INCREMENT PRIMARY KEY,  
	STUDENT_ID INT,
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(ID),
    BOOK_ID INT,
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(ID),
    LOAN_DATE DATE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    RETURNED BOOLEAN DEFAULT FALSE
);

-- 6 INSERIR NA TABELA DE EMPRESTIMOS A COLUNA DATA_DEVOLUCAO_PREVISTA

ALTER TABLE BOOK_LOANS
ADD DUE_DATE DATE;
 
-- 7 POPULAR A TABELA EMPRESTIMOS COM 5 ITENS

INSERT INTO BOOK_LOANS (STUDENT_ID, BOOK_ID, RETURNED, DUE_DATE)
VALUES
(1, 1, FALSE, '2025-10-17'),
(2, 2, FALSE, '2025-10-18'),
(3, 3, TRUE,  '2025-10-12'),
(4, 4, FALSE, '2025-10-20'),
(5, 5, TRUE, '2025-10-19');
 
-- 8 MOSTRAR TODOS OS LIVROS DISPONÍVEIS COM QUANTIDADE MAIOR QUE 3

SELECT BOOK_NAME AS BOOK, QTY_AVAILABLE AS QUANTITY
FROM AVAILABLE_BOOKS
WHERE QTY_AVAILABLE > 3;
 
-- 9 MOSTRAR TODOS OS ALUNOS DA 6º SÉRIE

SELECT S.STUDENT_NAME, S.BIRTH_DATE
FROM STUDENTS S
JOIN GRADES G ON S.GRADE_ID = G.ID
WHERE G.GRADE_NAME = '6th Grade';

-- 10 REGISTRAR UM EMPRÉSTIMO (ALUNO PEDRO LIMA PEGOU "O HOBBIT" EM 2025-10-10 E PRETENDE DEVOLVER 2025-10-25

INSERT INTO BOOK_LOANS (STUDENT_ID, BOOK_ID, LOAN_DATE, DUE_DATE, RETURNED)
VALUES (
    3, 2, '2025-10-10', '2025-10-25', FALSE
 );
 
 SELECT * FROM BOOK_LOANS;
 
-- 11 DIMINUIR A QUANTIDADE DISPONÍVEL DO LIVRO "O HOBBIT" EM 1
-- DICA: PODE USAR SUBTRAÇÃO! QTD_DISPONIVEL = QTD_DISPONIVEL - 1

UPDATE AVAILABLE_BOOKS
SET QTY_AVAILABLE = QTY_AVAILABLE - 1
WHERE ID = 2;
 
-- 12 MOSTRAR O TOTAL DE LIVROS DISPONÍVEIS EM UMA COLUNA CHAMADA TOTAL_LIVROS

SELECT SUM(QTY_AVAILABLE) AS TOTAL_BOOKS
FROM AVAILABLE_BOOKS;
 
-- 13 ALTERAR O NOME DA TABELA LIVROS PARA LIVROS_EM_ESTOQUE
 
RENAME TABLE BOOKS TO AVAILABLE_BOOKS;
 
-- 14 MOSTRAR O VALOR TOTAL INVESTIDO EM LIVROS EM UMA COLUNA CHAMADA VALOR_TOTAL_BIBLIOTECA
-- DICA: USE SUM(COLUNA_1 * COLUNA_2)

SELECT SUM(PRICE * QTY_AVAILABLE) AS TOTAL_VALUE_LIBRARY
FROM AVAILABLE_BOOKS;

SELECT CONCAT('R$ ', FORMAT(SUM(PRICE * QTY_AVAILABLE), 2)) AS TOTAL_VALUE_LIBRARY
FROM AVAILABLE_BOOKS;
 
-- 15 MOSTRAR OS LIVROS DISPONIVEIS COM
-- QUANTIDADE MAIOR QUE 2, PREÇO MAIOR QUE 50 REAIS E GÊNERO SEJA FANTASIA OU LITERATURA
-- DICA: USE WHERE E IN()

SELECT BOOK_NAME, AUTHOR, g.GENRE_NAME, QTY_AVAILABLE, PRICE
FROM AVAILABLE_BOOKS
JOIN GENRE g ON GENRE_ID = g.ID
WHERE 
    QTY_AVAILABLE > 2
    AND PRICE > 50
    AND g.GENRE_NAME IN ('Fiction', 'History');

-- 16 FAZER UMA TRANSAÇÃO PARA EMPRESTAR UM LIVRO
-- AO EMPRESTAR, DIMINUIR 1 DO ESTOQUE E REGISTRAR O EMPRÉSTIMO
-- DICA: USE O START TRANSACTION; 
-- FAÇA AS OPERAÇÕES
-- POR FIM DÊ COMMIT;

SELECT QTY_AVAILABLE 
FROM AVAILABLE_BOOKS 
WHERE ID = 2 
FOR UPDATE;

INSERT INTO BOOK_LOANS (STUDENT_ID, BOOK_ID, LOAN_DATE, DUE_DATE, RETURNED)
VALUES (3, 2, '2025-10-10', '2025-10-25', FALSE);

UPDATE AVAILABLE_BOOKS
SET QTY_AVAILABLE = QTY_AVAILABLE - 1
WHERE ID = 2
AND QTY_AVAILABLE > 0;

SELECT QTY_AVAILABLE 
FROM AVAILABLE_BOOKS 
WHERE ID = 2 
FOR UPDATE;


